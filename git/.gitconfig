# set your user tokens as environment variables, such as ~/.secrets
# See the README for examples.
[user]
	signingkey = ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINE6i8g88hWDLjvuF8toQLJ9nCs8hZojlzBCswr9dg3F
	name = Luis Urrutia
	email = luis@urrutia.me
[core]
  autocrlf = false
  editor = vim
  ignorecase = false
  excludesfile = ~/.config/git/.gitignore
  attributesFile = ~/.config/git/.gitattributes
  # via https://youtu.be/aolI_Rz0ZqY?si=SXHJdhyfSkDQ81ry&t=1714
  fsmonitor = true
  pager = delta
[delta]
  navigate = true
  line-numbers = true
[init]
	defaultBranch = main
[interactive]
  diffFilter = delta --color-only
[column]
  # via https://youtu.be/aolI_Rz0ZqY?si=9lzCkyrLCay3TiCR&t=1004
  ui = auto
[color]
  ui = true
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red
  new = green
[alias]
  authors = !git log --pretty=format:'%an <%ae>' "." | sort | uniq -c | sort -nr

  # add
  a = add                           # add
  chunkyadd = add --patch           # stage commits chunk by chunk

  # via https://web.archive.org/web/20190406040140/http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
  snapshot = !git stash save --all \""snapshot: $(date)"\" && git stash apply "stash@{0}"
  snapshots = !git stash list --grep snapshot

  # via https://www.youtube.com/watch?v=aolI_Rz0ZqY&t=2391s
  staash = stash --all

  #via https://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
  recent-branches = "!r() { refbranch=$1 count=$2; git for-each-ref --sort=-committerdate refs/heads --format='%(refname:short)|%(HEAD)%(color:yellow)%(refname:short)|%(color:bold green)%(committerdate:relative)|%(color:blue)%(subject)|%(color:magenta)%(authorname)%(color:reset)' --color=always --count=${count:-20} | while read line; do branch=$(echo \"$line\" | awk 'BEGIN { FS = \"|\" }; { print $1 }' | tr -d '*'); ahead=$(git rev-list --count \"${refbranch:-origin/main}..${branch}\"); behind=$(git rev-list --count \"${branch}..${refbranch:-origin/main}\"); colorline=$(echo \"$line\" | sed 's/^[^|]*|//'); echo \"$ahead|$behind|$colorline\" | awk -F'|' -vOFS='|' '{$5=substr($5,1,70)}1' ; done | ( echo \"ahead|behind|branch\n\" && cat) | column -ts'|';}; r"

  # branch
  b = branch -v                     # branch (verbose)
  branch-name = !git rev-parse --abbrev-ref HEAD | tr -d '\n' | tr -d ' '

  # commit
  c = commit -m                     # commit with message
  ca = commit -am                   # commit all with message
  ci = commit                       # commit
  amend = commit --amend            # ammend your last commit
  ammend = commit --amend           # ammend your last commit

  # checkout
  co = checkout                     # checkout
  nb = checkout -b                  # create and switch to a new branch (mnemonic: "git new branch branchname...")

  # cherry-pick
  cp = cherry-pick -x               # grab a change from a branch

  # diff
  d = diff                          # diff unstaged changes
  dc = diff --cached                # diff staged changes
  last = diff HEAD^                 # diff last committed change

  # log
  l = log --graph --date=short
  changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
  short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
  simple = log --pretty=format:\" * %s\"
  shortnocolor = log --pretty=format:\"%h %cr %cn %s\"
  # via https://www.youtube.com/watch?v=aolI_Rz0ZqY&t=2391s
  search-string-changes = "!f() { git log -S \"$1\" -p; }; f"

  # pull
  pl = pull                         # pull

  # push
  ps = push                          # push
  # via https://youtu.be/aolI_Rz0ZqY?si=bUwxbIA23dM_K2Q2&t=1063
  psf = push --force-with-lease      # force push with lease

  # rebase
  rc = rebase --continue            # continue rebase
  rs = rebase --skip                # skip rebase

  # remote
  r = remote -v                     # show remotes (verbose)

  # reset
  unstage = reset HEAD              # remove files from index (tracking)
  uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
  filelog = log -u                  # show changes to a file
  mt = mergetool                    # fire up the merge tool

  # stash
  ss = stash                        # stash changes
  sl = stash list                   # list stashes
  sa = stash apply                  # apply stash (restore changes)
  sd = stash drop                   # drop stashes (destory changes)

  # status
  s = status                        # status
  st = status                       # status
  stat = status                     # status

  # tag
  t = tag -n                        # show tags with <n> lines of each tag message

  # svn helpers
  svnr = svn rebase
  svnd = svn dcommit
  svnl = svn log --oneline --show-commit

  # via https://youtu.be/aolI_Rz0ZqY?si=5W5D_Vpm0NVFBs6X&t=692
  smart-blame = blame -w -M -C -C -C
[format]
  pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset
[mergetool]
  prompt = false
[mergetool "mvimdiff"]
  cmd="mvim -c 'Gdiff' $MERGED"     # use fugitive.vim for 3-way merge
  keepbackup=false
[merge]
  summary = true
  verbosity = 1
  tool = mvimdiff
  conflictstyle = diff3
[apply]
  whitespace = nowarn
[branch]
  # via https://youtu.be/aolI_Rz0ZqY?si=RjnOM_oAobpR_mDG&t=1021
  sort = -committerdate
  autosetupmerge = true
[commit]
  template = ~/.config/git/default-commit-message
[push]
  # 'git push' will push the current branch to its tracking branch
  # the usual default is to push all branches
  default = upstream
[pull]
  rebase = true
[advice]
  statusHints = false
[rebase]
  autoStash = true
  forkPoint = false
[diff]
  # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
  # instead of a/b/c/d as prefixes for patches
  mnemonicprefix = true
  colorMoved = default
	algorithm = patience
[rerere]
  # Remember my merges
  # http://gitfu.wordpress.com/2008/04/20/git-rerere-rereremember-what-you-did-last-time/
  # https://youtu.be/aolI_Rz0ZqY?si=StlHaCAzfCnogSF6&t=903
  enabled = true
[include]
  path = .gitconfig.user
[gpg]
	format = ssh
[commit]
	gpgsign = true
[gpg "ssh"]
	program = /Applications/1Password.app/Contents/MacOS/op-ssh-sign
# via https://youtu.be/aolI_Rz0ZqY?si=KvPxuvLq3MjdF4mZ&t=1344
[maintenance]
	auto = false
  strategy = incremental
[fetch]
 writeCommitGraph = true
 prune = true
[diff "exif"]
	textconv = exiftool
[filter "lfs"]
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
